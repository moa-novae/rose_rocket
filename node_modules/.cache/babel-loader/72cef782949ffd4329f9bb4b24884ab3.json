{"ast":null,"code":"var _jsxFileName = \"/home/momo/portfolio/roseRocket/client/src/components/Calendar/DayColumn/Task/Task.js\";\nimport React, { useState } from \"react\";\nimport { bgBrightness } from \"../../../../utils/bgBrightness\";\nimport TaskModal from \"./TaskModal/TaskModal\";\nimport \"./task.scss\";\nexport default function Task(props) {\n  const {\n    addTask,\n    taskInfo,\n    driversList,\n    deleteTask,\n    addAndDeleteTask,\n    overlap\n  } = props;\n  const [showModal, setShowModal] = useState(false); // lane is used for horizontal offsets when more than one task share an hour block\n\n  let lane = 0;\n  const driverIndex = driversList.map(driver => driver.id).indexOf(taskInfo.driver.id);\n\n  if (overlap) {\n    lane = driverIndex + 1;\n  }\n\n  const taskBgColour = driversList[driverIndex].colour;\n  const taskFontColour = bgBrightness(taskBgColour) === \"light\" ? \"#fafaaf\" : \"#3c4043\";\n  return /*#__PURE__*/React.createElement(React.Fragment, null, taskInfo && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TaskModal, {\n    showModal: showModal,\n    setShowModal: setShowModal,\n    taskInfo: taskInfo,\n    addTask: addTask,\n    deleteTask: deleteTask,\n    addAndDeleteTask: addAndDeleteTask,\n    driversList: driversList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task\" // -0.1 and +0.05 allows sliver of space between connective tasks\n    ,\n    style: {\n      height: `${3 * taskInfo.duration - 0.1}em`,\n      top: `${3 * taskInfo.hour + 0.05}em`,\n      width: `${100 - lane * 4}%`,\n      backgroundColor: taskBgColour,\n      color: taskFontColour\n    },\n    onClick: () => {\n      setShowModal(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, taskInfo.name, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, taskInfo.description)))));\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/DayColumn/Task/Task.js"],"names":["React","useState","bgBrightness","TaskModal","Task","props","addTask","taskInfo","driversList","deleteTask","addAndDeleteTask","overlap","showModal","setShowModal","lane","driverIndex","map","driver","id","indexOf","taskBgColour","colour","taskFontColour","height","duration","top","hour","width","backgroundColor","color","name","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAO,aAAP;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAClC,QAAM;AACJC,IAAAA,OADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA,gBALI;AAMJC,IAAAA;AANI,MAOFN,KAPJ;AAQA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C,CATkC,CAUlC;;AACA,MAAIa,IAAI,GAAG,CAAX;AACA,QAAMC,WAAW,GAAGP,WAAW,CAC5BQ,GADiB,CACZC,MAAD,IAAYA,MAAM,CAACC,EADN,EAEjBC,OAFiB,CAETZ,QAAQ,CAACU,MAAT,CAAgBC,EAFP,CAApB;;AAGA,MAAIP,OAAJ,EAAa;AACXG,IAAAA,IAAI,GAAGC,WAAW,GAAG,CAArB;AACD;;AACD,QAAMK,YAAY,GAAGZ,WAAW,CAACO,WAAD,CAAX,CAAyBM,MAA9C;AACA,QAAMC,cAAc,GAClBpB,YAAY,CAACkB,YAAD,CAAZ,KAA+B,OAA/B,GAAyC,SAAzC,GAAqD,SADvD;AAEA,sBACE,0CACGb,QAAQ,iBACP,uDAEE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEK,SADb;AAEE,IAAA,YAAY,EAAEC,YAFhB;AAGE,IAAA,QAAQ,EAAEN,QAHZ;AAIE,IAAA,OAAO,EAAED,OAJX;AAKE,IAAA,UAAU,EAAEG,UALd;AAME,IAAA,gBAAgB,EAAEC,gBANpB;AAOE,IAAA,WAAW,EAAEF,WAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAYE;AACE,IAAA,SAAS,EAAC,MADZ,CAEE;AAFF;AAGE,IAAA,KAAK,EAAE;AACLe,MAAAA,MAAM,EAAG,GAAE,IAAIhB,QAAQ,CAACiB,QAAb,GAAwB,GAAI,IADlC;AAELC,MAAAA,GAAG,EAAG,GAAE,IAAIlB,QAAQ,CAACmB,IAAb,GAAoB,IAAK,IAF5B;AAGLC,MAAAA,KAAK,EAAG,GAAE,MAAMb,IAAI,GAAG,CAAE,GAHpB;AAILc,MAAAA,eAAe,EAAER,YAJZ;AAKLS,MAAAA,KAAK,EAAEP;AALF,KAHT;AAUE,IAAA,OAAO,EAAE,MAAM;AACbT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAcE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,QAAQ,CAACuB,IADZ,eAEE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCvB,QAAQ,CAACwB,WAA5C,CAFF,CAdF,CAZF,CAFJ,CADF;AAsCD","sourcesContent":["import React, { useState } from \"react\";\nimport { bgBrightness } from \"../../../../utils/bgBrightness\";\nimport TaskModal from \"./TaskModal/TaskModal\";\nimport \"./task.scss\";\n\nexport default function Task(props) {\n  const {\n    addTask,\n    taskInfo,\n    driversList,\n    deleteTask,\n    addAndDeleteTask,\n    overlap,\n  } = props;\n  const [showModal, setShowModal] = useState(false);\n  // lane is used for horizontal offsets when more than one task share an hour block\n  let lane = 0;\n  const driverIndex = driversList\n    .map((driver) => driver.id)\n    .indexOf(taskInfo.driver.id);\n  if (overlap) {\n    lane = driverIndex + 1;\n  }\n  const taskBgColour = driversList[driverIndex].colour;\n  const taskFontColour =\n    bgBrightness(taskBgColour) === \"light\" ? \"#fafaaf\" : \"#3c4043\";\n  return (\n    <>\n      {taskInfo && (\n        <>\n          {/* show modal of task detail if user click on task */}\n          <TaskModal\n            showModal={showModal}\n            setShowModal={setShowModal}\n            taskInfo={taskInfo}\n            addTask={addTask}\n            deleteTask={deleteTask}\n            addAndDeleteTask={addAndDeleteTask}\n            driversList={driversList}\n          />\n\n          <div\n            className=\"task\"\n            // -0.1 and +0.05 allows sliver of space between connective tasks\n            style={{\n              height: `${3 * taskInfo.duration - 0.1}em`,\n              top: `${3 * taskInfo.hour + 0.05}em`,\n              width: `${100 - lane * 4}%`,\n              backgroundColor: taskBgColour,\n              color: taskFontColour,\n            }}\n            onClick={() => {\n              setShowModal(true);\n            }}\n          >\n            <div className=\"task-name\">\n              {taskInfo.name}\n              <div className=\"task-description\">{taskInfo.description}</div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}