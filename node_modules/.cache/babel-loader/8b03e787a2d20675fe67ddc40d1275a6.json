{"ast":null,"code":"import { useState } from \"react\";\nimport { convertTime } from \"../../../../utils/convertTime\";\nexport default function useCreateModal(initialState, addTask) {\n  const [form, setForm] = useState(initialState);\n\n  function validateOnChange(name, newValue, oldValue) {\n    switch (name) {\n      case \"startDay\":\n      case \"endDay\":\n        if (newValue >= 0 && newValue <= 364) {\n          return newValue;\n        }\n\n        return oldValue;\n\n      case \"startHour\":\n      case \"endHour\":\n        if (newValue >= 0 && newValue < 24) {\n          return newValue;\n        }\n\n        return oldValue;\n\n      default:\n        return newValue;\n    }\n  }\n\n  function handleOnChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setForm(prev => ({ ...prev,\n      [name]: validateOnChange(name, value, prev[name])\n    }));\n  }\n\n  function handleDriverChange(driver) {\n    setForm(prev => ({ ...prev,\n      driver\n    }));\n  }\n\n  function handleTaskTypeChange(taskType) {\n    setForm(prev => ({ ...prev,\n      taskType\n    }));\n  }\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver,\n      location: {\n        start: startLocation,\n        end: endLocation\n      },\n      time: {\n        start: startTime,\n        end: endTime\n      }\n    };\n    addTask(task);\n  }\n\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange,\n    handleAddTask\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/CalendarSidebar/CreateModal/useCreateModal.js"],"names":["useState","convertTime","useCreateModal","initialState","addTask","form","setForm","validateOnChange","name","newValue","oldValue","handleOnChange","e","value","target","prev","handleDriverChange","driver","handleTaskTypeChange","taskType","handleAddTask","description","startLocation","endLocation","startDay","startHour","endDay","endHour","startTime","endTime","task","detail","type","id","location","start","end","time"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAAQC,WAAR,QAA0B,+BAA1B;AACA,eAAe,SAASC,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+C;AAC5D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAACG,YAAD,CAAhC;;AAEA,WAASI,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;AAClD,YAAQF,IAAR;AACE,WAAK,UAAL;AACA,WAAK,QAAL;AACE,YAAIC,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,GAAjC,EAAsC;AACpC,iBAAOA,QAAP;AACD;;AACD,eAAOC,QAAP;;AACF,WAAK,WAAL;AACA,WAAK,SAAL;AACE,YAAID,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,GAAG,EAAhC,EAAoC;AAClC,iBAAOA,QAAP;AACD;;AACD,eAAOC,QAAP;;AACF;AACE,eAAOD,QAAP;AAdJ;AAgBD;;AACD,WAASE,cAAT,CAAwBC,CAAxB,EAA2B;AACzB,UAAM;AAAEJ,MAAAA,IAAF;AAAQK,MAAAA;AAAR,QAAkBD,CAAC,CAACE,MAA1B;AACAR,IAAAA,OAAO,CAAES,IAAD,KAAW,EACjB,GAAGA,IADc;AAEjB,OAACP,IAAD,GAAQD,gBAAgB,CAACC,IAAD,EAAOK,KAAP,EAAcE,IAAI,CAACP,IAAD,CAAlB;AAFP,KAAX,CAAD,CAAP;AAID;;AACD,WAASQ,kBAAT,CAA4BC,MAA5B,EAAoC;AAClCX,IAAAA,OAAO,CAAES,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWE,MAAAA;AAAX,KAAX,CAAD,CAAP;AACD;;AACD,WAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AACtCb,IAAAA,OAAO,CAAES,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWI,MAAAA;AAAX,KAAX,CAAD,CAAP;AACD;;AAGD,WAASC,aAAT,GAAyB;AACvB;AACA,UAAM;AACJZ,MAAAA,IADI;AAEJa,MAAAA,WAFI;AAGJF,MAAAA,QAHI;AAIJF,MAAAA,MAJI;AAKJK,MAAAA,aALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA,QAPI;AAQJC,MAAAA,SARI;AASJC,MAAAA,MATI;AAUJC,MAAAA;AAVI,QAWFtB,IAXJ;AAYA,UAAMuB,SAAS,GAAG3B,WAAW,CAACuB,QAAD,EAAW,KAAX,EAAkB,MAAlB,CAAX,GAAuCC,SAAzD;AACA,UAAMI,OAAO,GAAG5B,WAAW,CAACyB,MAAD,EAAS,KAAT,EAAgB,MAAhB,CAAX,GAAqCC,OAArD;AACA,UAAMG,IAAI,GAAG;AACXtB,MAAAA,IAAI,EAAEA,IADK;AAEXuB,MAAAA,MAAM,EAAEV,WAFG;AAGXW,MAAAA,IAAI,EAAEb,QAAQ,CAACc,EAHJ;AAIXhB,MAAAA,MAJW;AAKXiB,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAEb,aAAT;AAAwBc,QAAAA,GAAG,EAAEb;AAA7B,OALC;AAMXc,MAAAA,IAAI,EAAE;AAAEF,QAAAA,KAAK,EAAEP,SAAT;AAAoBQ,QAAAA,GAAG,EAAEP;AAAzB;AANK,KAAb;AAQAzB,IAAAA,OAAO,CAAC0B,IAAD,CAAP;AACD;;AACD,SAAO;AACLzB,IAAAA,IADK;AAELM,IAAAA,cAFK;AAGLK,IAAAA,kBAHK;AAILE,IAAAA,oBAJK;AAKLE,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useState } from \"react\";\nimport {convertTime} from \"../../../../utils/convertTime\"\nexport default function useCreateModal(initialState, addTask) {\n  const [form, setForm] = useState(initialState);\n\n  function validateOnChange(name, newValue, oldValue) {\n    switch (name) {\n      case \"startDay\":\n      case \"endDay\":\n        if (newValue >= 0 && newValue <= 364) {\n          return newValue;\n        }\n        return oldValue;\n      case \"startHour\":\n      case \"endHour\":\n        if (newValue >= 0 && newValue < 24) {\n          return newValue;\n        }\n        return oldValue;\n      default:\n        return newValue;\n    }\n  }\n  function handleOnChange(e) {\n    const { name, value } = e.target;\n    setForm((prev) => ({\n      ...prev,\n      [name]: validateOnChange(name, value, prev[name]),\n    }));\n  }\n  function handleDriverChange(driver) {\n    setForm((prev) => ({ ...prev, driver }));\n  }\n  function handleTaskTypeChange(taskType) {\n    setForm((prev) => ({ ...prev, taskType }));\n  }\n\n  \n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour,\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver,\n      location: { start: startLocation, end: endLocation },\n      time: { start: startTime, end: endTime },\n    };\n    addTask(task);\n  }\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange,\n    handleAddTask,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}