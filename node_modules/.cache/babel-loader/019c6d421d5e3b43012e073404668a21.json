{"ast":null,"code":"import React,{useEffect}from\"react\";import\"./modal.scss\";export default function Modal(_ref){var showModal=_ref.showModal,setShowModal=_ref.setShowModal,handleOnClose=_ref.handleOnClose,children=_ref.children;/* not the cleanest way to run function when modal closes\n  since it is also run on load as modal is closed by default\n  but things work for now\n  it is mainly used to reset modal related state on close*/useEffect(function(){if(!showModal){if(handleOnClose){handleOnClose();}}},[showModal,handleOnClose]);return/*#__PURE__*/ // only show modal if showModal === true\nReact.createElement(React.Fragment,null,showModal&&/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"backdrop\",onClick:function onClick(){setShowModal(false);}}),/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},children)));}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Modal/Modal.js"],"names":["React","useEffect","Modal","showModal","setShowModal","handleOnClose","children"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAO,cAAP,CACA,cAAe,SAASC,CAAAA,KAAT,MAKZ,IAJDC,CAAAA,SAIC,MAJDA,SAIC,CAHDC,YAGC,MAHDA,YAGC,CAFDC,aAEC,MAFDA,aAEC,CADDC,QACC,MADDA,QACC,CACD;;;2DAIAL,SAAS,CAAC,UAAM,CACd,GAAI,CAACE,SAAL,CAAgB,CACd,GAAIE,aAAJ,CAAmB,CACjBA,aAAa,GACd,CACF,CACF,CANQ,CAMN,CAACF,SAAD,CAAYE,aAAZ,CANM,CAAT,CAOA,oBACE;AACA,wCACGF,SAAS,eACR,qDACE,2BACE,SAAS,CAAC,UADZ,CAEE,OAAO,CAAE,kBAAM,CACbC,YAAY,CAAC,KAAD,CAAZ,CACD,CAJH,EADF,cAOE,2BAAK,SAAS,CAAC,OAAf,EAAwBE,QAAxB,CAPF,CAFJ,CAFF,CAgBD","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./modal.scss\";\nexport default function Modal({\n  showModal,\n  setShowModal,\n  handleOnClose,\n  children,\n}) {\n  /* not the cleanest way to run function when modal closes\n  since it is also run on load as modal is closed by default\n  but things work for now\n  it is mainly used to reset modal related state on close*/\n  useEffect(() => {\n    if (!showModal) {\n      if (handleOnClose) {\n        handleOnClose();\n      }\n    }\n  }, [showModal, handleOnClose]);\n  return (\n    // only show modal if showModal === true\n    <>\n      {showModal && (\n        <>\n          <div\n            className=\"backdrop\"\n            onClick={() => {\n              setShowModal(false);\n            }}\n          ></div>\n          <div className=\"modal\">{children}</div>\n        </>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}