{"ast":null,"code":"import { useState } from \"react\";\nimport uniqueId from \"../../utils/uniqueId\";\n/*\n  I couldn't find a good library that implements time on \n  a 24 h / 7 day / 52 week discrete timescale. Popular libraries \n  like MomentJS are implemented in real world timescales. \n  For simplicity sake, I ended up just writing the way the \n  time works myself.\n */\n\nexport default function useCalendar() {\n  /* I've elected to use useState instead of useReducer because the various states \n  don't really rely on the value of another state in order to update*/\n\n  /* Time 0 is set set arbitrarily to some point in the spacetime\n  Each increment of 1 represents the passing of one hour\n  Not sure if this is the best way to keep track of time\n  Can switch to momentJS in the future\n  No use for time state right now since not using real world time\n  */\n  // const [time, setTime] = useState(0);\n  // weeks starts incrementing at 0\n  const [calendarTime, setCalendarTime] = useState(0); // state responsible for controlled input of calendar header weeks\n\n  const [weekInput, setWeekInput] = useState(calendarTime); // keep track of which drivers fall under the dispatcher each year\n  // and whether they are shown on the calendar\n\n  const driversTemp = [{\n    id: 1,\n    name: \"bob\",\n    selected: true\n  }, {\n    id: 2,\n    name: \"joe\",\n    selected: true\n  }];\n  const [drivers, setDrivers] = useState(driversTemp); // tasks of the year\n\n  const initialYearTasks = new Map([[\"abcdef\", {\n    id: \"abcdef\",\n    name: \"task1\",\n    detail: \"very cool\",\n    time: {\n      start: 100,\n      end: 103\n    },\n    driver: {\n      id: 1,\n      name: \"bob\"\n    },\n    locations: {\n      start: \"a\",\n      finish: \"b\"\n    }\n  }], [\"fedcba\", {\n    id: \"fedcba\",\n    name: \"task2\",\n    detail: \"super cool\",\n    time: {\n      start: 200,\n      end: 202\n    },\n    driver: {\n      id: 2,\n      name: \"joe\"\n    },\n    locations: {\n      start: \"c\",\n      finish: \"d\"\n    }\n  }]]);\n  const [yearlyTasks, setYearlyTasks] = useState(initialYearTasks);\n\n  const toggleDriverSelected = function (driverId) {\n    setDrivers(prev => {\n      // find index of toggled driver in state array\n      const toggledDriverIndex = prev.map(driver => driver.id).indexOf(driverId); // // construct new state array where selected bool is toggled\n\n      return prev.map((driver, i) => {\n        if (i === toggledDriverIndex) {\n          return { ...driver,\n            selected: !driver.selected\n          };\n        }\n\n        return driver;\n      });\n    });\n  };\n\n  const timeRatio = {\n    hour: 1,\n    day: 24,\n    week: 168,\n    year: 8736\n  };\n\n  const convertTime = function (time, from, to) {\n    return time * (timeRatio[from] / timeRatio[to]);\n  }; // number of week into the year\n\n\n  const week = convertTime(calendarTime % timeRatio.year, \"hour\", \"week\");\n\n  const changeWeekBy = n => {\n    setCalendarTime(prev => {\n      const newWeek = prev + n * timeRatio.week; // Don't allow negative weeks\n\n      return newWeek >= 0 ? newWeek : prev;\n    });\n  }; // return which day of the week and what hour in 24hr\n\n\n  const findDayAndHourFromTime = function (time) {\n    const day = Math.floor(time % timeRatio.week / timeRatio.day);\n    const hour = time % timeRatio.day;\n    return {\n      day,\n      hour\n    };\n  }; // handles controlled input of calendar header\n\n\n  const handleOnChange = function (e) {\n    const newValue = e.target.value.trim(); // number must be between 0-51 included\n\n    console.log(weekInput);\n    const re = /^([0-9]|[1-4][0-9]|5[01])$/;\n    setWeekInput(prev => {\n      if (re.test(newValue) || newValue === \"\") {\n        return newValue;\n      } else {\n        return prev;\n      }\n    });\n  }; // change week to selected week from week input box\n\n\n  const handleWeekJump = function () {\n    const weekDifference = weekInput - week;\n    console.log(weekDifference);\n    changeWeekBy(weekDifference);\n  }; // find the task of the week currently viewed\n\n\n  let weeklyTasks = Array.from(yearlyTasks.values()).filter(task => {\n    return Math.floor(convertTime(task.time.start, \"hour\", \"week\")) === week;\n  }); //transform data to indicate day and time\n\n  weeklyTasks = weeklyTasks.map(task => ({ ...task,\n    ...findDayAndHourFromTime(task.time.start),\n    duration: task.time.end - task.time.start\n  }));\n  return {\n    changeWeekBy,\n    week,\n    weeklyTasks,\n    weekInput,\n    handleOnChange,\n    handleWeekJump,\n    drivers,\n    toggleDriverSelected\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/useCalendar.js"],"names":["useState","uniqueId","useCalendar","calendarTime","setCalendarTime","weekInput","setWeekInput","driversTemp","id","name","selected","drivers","setDrivers","initialYearTasks","Map","detail","time","start","end","driver","locations","finish","yearlyTasks","setYearlyTasks","toggleDriverSelected","driverId","prev","toggledDriverIndex","map","indexOf","i","timeRatio","hour","day","week","year","convertTime","from","to","changeWeekBy","n","newWeek","findDayAndHourFromTime","Math","floor","handleOnChange","e","newValue","target","value","trim","console","log","re","test","handleWeekJump","weekDifference","weeklyTasks","Array","values","filter","task","duration"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport uniqueId from \"../../utils/uniqueId\";\n/*\n  I couldn't find a good library that implements time on \n  a 24 h / 7 day / 52 week discrete timescale. Popular libraries \n  like MomentJS are implemented in real world timescales. \n  For simplicity sake, I ended up just writing the way the \n  time works myself.\n */\nexport default function useCalendar() {\n  /* I've elected to use useState instead of useReducer because the various states \n  don't really rely on the value of another state in order to update*/\n  /* Time 0 is set set arbitrarily to some point in the spacetime\n  Each increment of 1 represents the passing of one hour\n  Not sure if this is the best way to keep track of time\n  Can switch to momentJS in the future\n  No use for time state right now since not using real world time\n  */\n  // const [time, setTime] = useState(0);\n  // weeks starts incrementing at 0\n  const [calendarTime, setCalendarTime] = useState(0);\n  // state responsible for controlled input of calendar header weeks\n  const [weekInput, setWeekInput] = useState(calendarTime);\n  // keep track of which drivers fall under the dispatcher each year\n  // and whether they are shown on the calendar\n  const driversTemp = [\n    { id: 1, name: \"bob\", selected: true },\n    { id: 2, name: \"joe\", selected: true },\n  ];\n  const [drivers, setDrivers] = useState(driversTemp);\n  // tasks of the year\n  const initialYearTasks = new Map([\n    [\n      \"abcdef\",\n      {\n        id: \"abcdef\",\n        name: \"task1\",\n        detail: \"very cool\",\n        time: { start: 100, end: 103 },\n        driver: { id: 1, name: \"bob\" },\n        locations: { start: \"a\", finish: \"b\" },\n      },\n    ],\n    [\n      \"fedcba\",\n      {\n        id: \"fedcba\",\n        name: \"task2\",\n        detail: \"super cool\",\n        time: { start: 200, end: 202 },\n        driver: { id: 2, name: \"joe\" },\n        locations: { start: \"c\", finish: \"d\" },\n      },\n    ],\n  ]);\n  const [yearlyTasks, setYearlyTasks] = useState(initialYearTasks);\n  const toggleDriverSelected = function (driverId) {\n    setDrivers((prev) => {\n      // find index of toggled driver in state array\n      const toggledDriverIndex = prev\n        .map((driver) => driver.id)\n        .indexOf(driverId);\n      // // construct new state array where selected bool is toggled\n      return prev.map((driver, i) => {\n        if (i === toggledDriverIndex) {\n          return { ...driver, selected: !driver.selected };\n        }\n        return driver;\n      });\n    });\n  };\n  const timeRatio = {\n    hour: 1,\n    day: 24,\n    week: 168,\n    year: 8736,\n  };\n\n  const convertTime = function (time, from, to) {\n    return time * (timeRatio[from] / timeRatio[to]);\n  };\n  // number of week into the year\n  const week = convertTime(calendarTime % timeRatio.year, \"hour\", \"week\");\n\n  const changeWeekBy = (n) => {\n    setCalendarTime((prev) => {\n      const newWeek = prev + n * timeRatio.week;\n      // Don't allow negative weeks\n      return newWeek >= 0 ? newWeek : prev;\n    });\n  };\n  // return which day of the week and what hour in 24hr\n  const findDayAndHourFromTime = function (time) {\n    const day = Math.floor((time % timeRatio.week) / timeRatio.day);\n    const hour = time % timeRatio.day;\n    return { day, hour };\n  };\n\n  // handles controlled input of calendar header\n  const handleOnChange = function (e) {\n    const newValue = e.target.value.trim();\n    // number must be between 0-51 included\n    console.log(weekInput);\n    const re = /^([0-9]|[1-4][0-9]|5[01])$/;\n    setWeekInput((prev) => {\n      if (re.test(newValue) || newValue === \"\") {\n        return newValue;\n      } else {\n        return prev;\n      }\n    });\n  };\n\n  // change week to selected week from week input box\n  const handleWeekJump = function () {\n    const weekDifference = weekInput - week;\n    console.log(weekDifference);\n    changeWeekBy(weekDifference);\n  };\n\n  // find the task of the week currently viewed\n  let weeklyTasks = Array.from(yearlyTasks.values()).filter((task) => {\n    return Math.floor(convertTime(task.time.start, \"hour\", \"week\")) === week;\n  });\n  //transform data to indicate day and time\n  weeklyTasks = weeklyTasks.map((task) => ({\n    ...task,\n    ...findDayAndHourFromTime(task.time.start),\n    duration: task.time.end - task.time.start,\n  }));\n\n  return {\n    changeWeekBy,\n    week,\n    weeklyTasks,\n    weekInput,\n    handleOnChange,\n    handleWeekJump,\n    drivers,\n    toggleDriverSelected,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}