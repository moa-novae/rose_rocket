{"ast":null,"code":"import { useState } from \"react\";\nimport { convertTime } from \"../../../../utils/convertTime\";\nexport default function useCreateModal(initialState, addTask) {\n  const [form, setForm] = useState(initialState);\n  const [error, setError] = useState({});\n\n  function validateOnChange(name, newValue, oldState) {\n    const validDay = /^([0-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-5][0-9]|36[0-3])$/;\n    const validHour = /^([0-9]|1[0-9]|2[0-3])$/;\n\n    switch (name) {\n      case \"startDay\":\n        if (newValue === \"\") {\n          return newValue;\n        } // check if valid day 0 - 363\n\n\n        if (validDay.test(newValue)) {\n          return newValue;\n        }\n\n        return oldState[name];\n\n      case \"startHour\":\n        if (newValue === \"\") {\n          return newValue;\n        } // check if valid hour 0 - 23\n\n\n        if (validHour.test(newValue)) {\n          // check if startHour less than endHour\n          if (parseInt(newValue) < parseInt(oldState.endHour) || !oldState.endHour) {\n            return newValue;\n          }\n        }\n\n        return oldState[name];\n\n      case \"endHour\":\n        if (newValue === \"\") {\n          return newValue;\n        } // check if valid hour 0 - 23\n\n\n        if (validHour.test(newValue)) {\n          // check if endHour less than startHour\n          if (parseInt(newValue) > parseInt(oldState.startHour) || !oldState.startHour) {\n            return newValue;\n          }\n        }\n\n        return oldState[name];\n\n      default:\n        return newValue;\n    }\n  }\n\n  function handleOnChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setForm(prev => ({ ...prev,\n      [name]: validateOnChange(name, value, prev)\n    }));\n  }\n\n  function handleDriverChange(driver) {\n    setForm(prev => ({ ...prev,\n      driver\n    }));\n  }\n\n  function handleTaskTypeChange(taskType) {\n    setForm(prev => ({ ...prev,\n      taskType\n    }));\n  }\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver,\n      location: {\n        start: startLocation,\n        end: endLocation\n      },\n      time: {\n        start: startTime,\n        end: endTime\n      }\n    };\n    addTask(task);\n  }\n\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange,\n    handleAddTask\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/CalendarSidebar/CreateModal/useCreateModal.js"],"names":["useState","convertTime","useCreateModal","initialState","addTask","form","setForm","error","setError","validateOnChange","name","newValue","oldState","validDay","validHour","test","parseInt","endHour","startHour","handleOnChange","e","value","target","prev","handleDriverChange","driver","handleTaskTypeChange","taskType","handleAddTask","description","startLocation","endLocation","startDay","endDay","startTime","endTime","task","detail","type","id","location","start","end","time"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { convertTime } from \"../../../../utils/convertTime\";\nexport default function useCreateModal(initialState, addTask) {\n  const [form, setForm] = useState(initialState);\n  const [error, setError] = useState({});\n\n  function validateOnChange(name, newValue, oldState) {\n    const validDay = /^([0-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-5][0-9]|36[0-3])$/;\n    const validHour = /^([0-9]|1[0-9]|2[0-3])$/;\n    switch (name) {\n      case \"startDay\":\n        if (newValue === \"\") {\n          return newValue;\n        }\n        // check if valid day 0 - 363\n        if (validDay.test(newValue)) {\n          return newValue;\n        }\n        return oldState[name];\n      case \"startHour\":\n        if (newValue === \"\") {\n          return newValue;\n        }\n        // check if valid hour 0 - 23\n        if (validHour.test(newValue)) {\n          // check if startHour less than endHour\n          if (\n            parseInt(newValue) < parseInt(oldState.endHour) ||\n            !oldState.endHour\n          ) {\n            return newValue;\n          }\n        }\n        return oldState[name];\n      case \"endHour\":\n        if (newValue === \"\") {\n          return newValue;\n        }\n        // check if valid hour 0 - 23\n        if (validHour.test(newValue)) {\n          // check if endHour less than startHour\n          if (\n            parseInt(newValue) > parseInt(oldState.startHour) ||\n            !oldState.startHour\n          ) {\n            return newValue;\n          }\n        }\n        return oldState[name];\n      default:\n        return newValue;\n    }\n  }\n  function handleOnChange(e) {\n    const { name, value } = e.target;\n    setForm((prev) => ({\n      ...prev,\n      [name]: validateOnChange(name, value, prev),\n    }));\n  }\n  function handleDriverChange(driver) {\n    setForm((prev) => ({ ...prev, driver }));\n  }\n  function handleTaskTypeChange(taskType) {\n    setForm((prev) => ({ ...prev, taskType }));\n  }\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour,\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver,\n      location: { start: startLocation, end: endLocation },\n      time: { start: startTime, end: endTime },\n    };\n    addTask(task);\n  }\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange,\n    handleAddTask,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}