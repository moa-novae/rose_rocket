{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/momo/portfolio/roseRocket/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export default function findOverlappingTasks(tasks){var overlappingTasks=[];var _iterator=_createForOfIteratorHelper(tasks),_step;try{var _loop=function _loop(){var currentTask=_step.value;function overlap(task){// check if currentTask start time between task start/end\nif(currentTask.id===task.id){return false;}else if(currentTask.time.start>=task.time.start&&currentTask.time.start<task.time.end){return true;}// check if currentTask end time between task start/end\nelse if(currentTask.time.end>task.time.start&&currentTask.time.end<=task.time.end){return true;}else{return false;}}if(tasks.some(overlap)){overlappingTasks.push(currentTask.id);}};for(_iterator.s();!(_step=_iterator.n()).done;){_loop();}}catch(err){_iterator.e(err);}finally{_iterator.f();}return overlappingTasks;}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/utils/findOverlappingTasks.js"],"names":["findOverlappingTasks","tasks","overlappingTasks","currentTask","overlap","task","id","time","start","end","some","push"],"mappings":"iJAAA,cAAe,SAASA,CAAAA,oBAAT,CAA8BC,KAA9B,CAAqC,CAClD,GAAMC,CAAAA,gBAAgB,CAAG,EAAzB,CADkD,yCAExBD,KAFwB,0CAEvCE,CAAAA,WAFuC,aAGhD,QAASC,CAAAA,OAAT,CAAiBC,IAAjB,CAAuB,CACrB;AACA,GAAIF,WAAW,CAACG,EAAZ,GAAmBD,IAAI,CAACC,EAA5B,CAAgC,CAC9B,MAAO,MAAP,CACD,CAFD,IAGK,IACHH,WAAW,CAACI,IAAZ,CAAiBC,KAAjB,EAA0BH,IAAI,CAACE,IAAL,CAAUC,KAApC,EACAL,WAAW,CAACI,IAAZ,CAAiBC,KAAjB,CAAyBH,IAAI,CAACE,IAAL,CAAUE,GAFhC,CAGH,CACA,MAAO,KAAP,CACD,CACD;AANK,IAOA,IACHN,WAAW,CAACI,IAAZ,CAAiBE,GAAjB,CAAuBJ,IAAI,CAACE,IAAL,CAAUC,KAAjC,EACAL,WAAW,CAACI,IAAZ,CAAiBE,GAAjB,EAAwBJ,IAAI,CAACE,IAAL,CAAUE,GAF/B,CAGH,CACA,MAAO,KAAP,CACD,CALI,IAKE,CACL,MAAO,MAAP,CACD,CACF,CACD,GAAIR,KAAK,CAACS,IAAN,CAAWN,OAAX,CAAJ,CAAyB,CACvBF,gBAAgB,CAACS,IAAjB,CAAsBR,WAAW,CAACG,EAAlC,EACD,CA1B+C,EAElD,+CAAiC,SAyBhC,CA3BiD,qDA6BlD,MAAOJ,CAAAA,gBAAP,CACD","sourcesContent":["export default function findOverlappingTasks(tasks) {\n  const overlappingTasks = [];\n  for (const currentTask of tasks) {\n    function overlap(task) {\n      // check if currentTask start time between task start/end\n      if (currentTask.id === task.id) {\n        return false\n      }\n      else if (\n        currentTask.time.start >= task.time.start &&\n        currentTask.time.start < task.time.end\n      ) {\n        return true;\n      }\n      // check if currentTask end time between task start/end\n      else if (\n        currentTask.time.end > task.time.start &&\n        currentTask.time.end <= task.time.end\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    if (tasks.some(overlap)) {\n      overlappingTasks.push(currentTask.id);\n    }\n  }\n\n  return overlappingTasks;\n}\n"]},"metadata":{},"sourceType":"module"}