{"ast":null,"code":"import { useState } from \"react\";\nimport { convertTime } from \"../../../../utils/convertTime\";\nexport default function useCreateModal(initialState, addTask, setShowModal) {\n  const [form, setForm] = useState(initialState);\n  const [error, setError] = useState({});\n\n  function validateSubmit(form) {\n    let newError = {};\n\n    if (!form.name) {\n      newError.name = \"Name cannot be empty\";\n    }\n\n    if (!form.taskType) {\n      newError.taskType = \"A task type must be selected\";\n    }\n\n    if (!form.startDay || !form.startHour || !form.endHour) {\n      newError.time = \"Please enter a complete time\";\n    }\n\n    return newError;\n  }\n\n  function validateOnChange(name, newValue, oldState) {\n    const validDay = /^([0-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-5][0-9]|36[0-3])$/;\n    const validHour = /^([0-9]|1[0-9]|2[0-3])$/;\n\n    switch (name) {\n      case \"startDay\":\n        if (newValue === \"\") {\n          return newValue;\n        } // check if valid day 0 - 363\n\n\n        if (validDay.test(newValue)) {\n          return newValue;\n        }\n\n        return oldState[name];\n\n      case \"startHour\":\n        if (newValue === \"\") {\n          return newValue;\n        } // check if valid hour 0 - 23\n\n\n        if (validHour.test(newValue)) {\n          // check if startHour less than endHour\n          if (parseInt(newValue) < parseInt(oldState.endHour) || !oldState.endHour) {\n            return newValue;\n          }\n        }\n\n        return oldState[name];\n\n      case \"endHour\":\n        if (newValue === \"\") {\n          return newValue;\n        } // check if valid hour 0 - 23\n\n\n        if (validHour.test(newValue)) {\n          // check if endHour less than startHour\n          if (parseInt(newValue) > parseInt(oldState.startHour) || !oldState.startHour) {\n            return newValue;\n          }\n        }\n\n        return oldState[name];\n\n      default:\n        return newValue;\n    }\n  }\n\n  function handleOnChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    setForm(prev => ({ ...prev,\n      [name]: validateOnChange(name, value, prev)\n    }));\n  }\n\n  function handleDriverChange(driver) {\n    setForm(prev => ({ ...prev,\n      driver\n    }));\n  }\n\n  function handleTaskTypeChange(taskType) {\n    setForm(prev => ({ ...prev,\n      taskType\n    }));\n  }\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver,\n      location: {\n        start: startLocation,\n        end: endLocation\n      },\n      time: {\n        start: startTime,\n        end: endTime\n      }\n    };\n    addTask(task);\n  }\n\n  function handleSubmit() {\n    const newErrors = validateSubmit(form);\n\n    if (Object.keys(newErrors).length) {\n      setError(newErrors);\n    } else {\n      handleAddTask();\n      setShowModal(false);\n    }\n  }\n\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange,\n    handleSubmit\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/CalendarSidebar/CreateModal/useCreateModal.js"],"names":["useState","convertTime","useCreateModal","initialState","addTask","setShowModal","form","setForm","error","setError","validateSubmit","newError","name","taskType","startDay","startHour","endHour","time","validateOnChange","newValue","oldState","validDay","validHour","test","parseInt","handleOnChange","e","value","target","prev","handleDriverChange","driver","handleTaskTypeChange","handleAddTask","description","startLocation","endLocation","endDay","startTime","endTime","task","detail","type","id","location","start","end","handleSubmit","newErrors","Object","keys","length"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { convertTime } from \"../../../../utils/convertTime\";\nexport default function useCreateModal(initialState, addTask, setShowModal) {\n  const [form, setForm] = useState(initialState);\n  const [error, setError] = useState({});\n\n  function validateSubmit(form) {\n    let newError = {};\n    if (!form.name) {\n      newError.name = \"Name cannot be empty\";\n    }\n    if (!form.taskType) {\n      newError.taskType = \"A task type must be selected\";\n    }\n    if (!form.startDay || !form.startHour || !form.endHour) {\n      newError.time = \"Please enter a complete time\";\n    }\n    return newError;\n  }\n\n  function validateOnChange(name, newValue, oldState) {\n    const validDay = /^([0-9]|[1-8][0-9]|9[0-9]|[12][0-9]{2}|3[0-5][0-9]|36[0-3])$/;\n    const validHour = /^([0-9]|1[0-9]|2[0-3])$/;\n    switch (name) {\n      case \"startDay\":\n        if (newValue === \"\") {\n          return newValue;\n        }\n        // check if valid day 0 - 363\n        if (validDay.test(newValue)) {\n          return newValue;\n        }\n        return oldState[name];\n      case \"startHour\":\n        if (newValue === \"\") {\n          return newValue;\n        }\n        // check if valid hour 0 - 23\n        if (validHour.test(newValue)) {\n          // check if startHour less than endHour\n          if (\n            parseInt(newValue) < parseInt(oldState.endHour) ||\n            !oldState.endHour\n          ) {\n            return newValue;\n          }\n        }\n        return oldState[name];\n      case \"endHour\":\n        if (newValue === \"\") {\n          return newValue;\n        }\n        // check if valid hour 0 - 23\n        if (validHour.test(newValue)) {\n          // check if endHour less than startHour\n          if (\n            parseInt(newValue) > parseInt(oldState.startHour) ||\n            !oldState.startHour\n          ) {\n            return newValue;\n          }\n        }\n        return oldState[name];\n      default:\n        return newValue;\n    }\n  }\n  function handleOnChange(e) {\n    const { name, value } = e.target;\n    setForm((prev) => ({\n      ...prev,\n      [name]: validateOnChange(name, value, prev),\n    }));\n  }\n  function handleDriverChange(driver) {\n    setForm((prev) => ({ ...prev, driver }));\n  }\n  function handleTaskTypeChange(taskType) {\n    setForm((prev) => ({ ...prev, taskType }));\n  }\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour,\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver,\n      location: { start: startLocation, end: endLocation },\n      time: { start: startTime, end: endTime },\n    };\n    addTask(task);\n  }\n\n  function handleSubmit() {\n    const newErrors = validateSubmit(form);\n    if (Object.keys(newErrors).length) {\n      setError(newErrors);\n    } else {\n      handleAddTask();\n      setShowModal(false);\n    }\n  }\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange,\n    handleSubmit,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}