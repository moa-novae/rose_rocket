{"ast":null,"code":"var _jsxFileName = \"/home/momo/portfolio/roseRocket/client/src/components/Calendar/DayColumn/DayColumn.js\";\nimport React from \"react\";\nimport \"./dayColumn.scss\";\nimport HourBlock from \"./HourBlock/HourBlock\";\nimport Task from \"./Task/Task\";\nimport findOverlappingTasks from \"../../../utils/findOverlappingTasks\";\nexport default function ({\n  day,\n  dailyTasks,\n  drivers,\n  driversList,\n  addTask,\n  deleteTask,\n  addAndDeleteTask\n}) {\n  // add 24 HourBlocks to each DayColumn\n  // each HourBlock is assigned an hour\n  const hourBlocks = Array(24).fill( /*#__PURE__*/React.createElement(HourBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 37\n    }\n  })); // the filter allows tasks that have drivers selected to show up\n\n  const visibleTasks = dailyTasks.filter(task => drivers.some(driver => driver.selected && driver.id === task.driver.id));\n  const overlappingTaskIds = findOverlappingTasks(visibleTasks);\n  const tasks = visibleTasks.map(task => /*#__PURE__*/React.createElement(Task, {\n    key: task.id,\n    taskInfo: task,\n    driversList: driversList,\n    addTask: addTask,\n    deleteTask: deleteTask,\n    addAndDeleteTask: addAndDeleteTask,\n    overlap: overlappingTaskIds.includes(task.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, day), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notch\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"day-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"hour-blocks\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, hourBlocks), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"task-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, tasks)));\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/DayColumn/DayColumn.js"],"names":["React","HourBlock","Task","findOverlappingTasks","day","dailyTasks","drivers","driversList","addTask","deleteTask","addAndDeleteTask","hourBlocks","Array","fill","visibleTasks","filter","task","some","driver","selected","id","overlappingTaskIds","tasks","map","includes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kBAAP;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,eAAe,UAAU;AACvBC,EAAAA,GADuB;AAEvBC,EAAAA,UAFuB;AAGvBC,EAAAA,OAHuB;AAIvBC,EAAAA,WAJuB;AAKvBC,EAAAA,OALuB;AAMvBC,EAAAA,UANuB;AAOvBC,EAAAA;AAPuB,CAAV,EAQZ;AACD;AACA;AACA,QAAMC,UAAU,GAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,eAAe,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf,CAAnB,CAHC,CAKD;;AACA,QAAMC,YAAY,GAAGT,UAAU,CAACU,MAAX,CAAmBC,IAAD,IACrCV,OAAO,CAACW,IAAR,CAAcC,MAAD,IAAYA,MAAM,CAACC,QAAP,IAAmBD,MAAM,CAACE,EAAP,KAAcJ,IAAI,CAACE,MAAL,CAAYE,EAAtE,CADmB,CAArB;AAGA,QAAMC,kBAAkB,GAAGlB,oBAAoB,CAACW,YAAD,CAA/C;AAEA,QAAMQ,KAAK,GAAGR,YAAY,CAACS,GAAb,CAAkBP,IAAD,iBAC7B,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACI,EADZ;AAEE,IAAA,QAAQ,EAAEJ,IAFZ;AAGE,IAAA,WAAW,EAAET,WAHf;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,UAAU,EAAEC,UALd;AAME,IAAA,gBAAgB,EAAEC,gBANpB;AAOE,IAAA,OAAO,EAAEW,kBAAkB,CAACG,QAAnB,CAA4BR,IAAI,CAACI,EAAjC,CAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADY,CAAd;AAYA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BhB,GAA7B,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BO,UAA9B,CADF,eAEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BW,KAA7B,CAFF,CAHF,CADF;AAUD","sourcesContent":["import React from \"react\";\nimport \"./dayColumn.scss\";\nimport HourBlock from \"./HourBlock/HourBlock\";\nimport Task from \"./Task/Task\";\nimport findOverlappingTasks from \"../../../utils/findOverlappingTasks\";\nexport default function ({\n  day,\n  dailyTasks,\n  drivers,\n  driversList,\n  addTask,\n  deleteTask,\n  addAndDeleteTask,\n}) {\n  // add 24 HourBlocks to each DayColumn\n  // each HourBlock is assigned an hour\n  const hourBlocks = Array(24).fill(<HourBlock />);\n\n  // the filter allows tasks that have drivers selected to show up\n  const visibleTasks = dailyTasks.filter((task) =>\n    drivers.some((driver) => driver.selected && driver.id === task.driver.id)\n  );\n  const overlappingTaskIds = findOverlappingTasks(visibleTasks);\n\n  const tasks = visibleTasks.map((task) => (\n    <Task\n      key={task.id}\n      taskInfo={task}\n      driversList={driversList}\n      addTask={addTask}\n      deleteTask={deleteTask}\n      addAndDeleteTask={addAndDeleteTask}\n      overlap={overlappingTaskIds.includes(task.id)}\n    />\n  ));\n\n  return (\n    <div className=\"day-column\">\n      <div className=\"day-header\">{day}</div>\n      <div className=\"notch\"></div>\n      <div className=\"day-block\">\n        <div className=\"hour-blocks\">{hourBlocks}</div>\n        <div className=\"task-block\">{tasks}</div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}