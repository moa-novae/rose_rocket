{"ast":null,"code":"import { useState } from \"react\";\nexport default function useCreateModal(initialState, addTask) {\n  const [form, setForm] = useState(initialState);\n\n  function validateOnChange(name, newValue, oldValue) {\n    switch (name) {\n      case \"startDay\":\n      case \"endDay\":\n        if (newValue >= 0 && newValue <= 364) {\n          return newValue;\n        }\n\n        return oldValue;\n\n      case \"startHour\":\n      case \"endHour\":\n        if (newValue >= 0 && newValue < 24) {\n          return newValue;\n        }\n\n        return oldValue;\n\n      default:\n        return newValue;\n    }\n  }\n\n  function handleOnChange(e) {\n    const {\n      name,\n      value\n    } = e.target;\n    console.log(\"name\", name, \"value\", value);\n    setForm(prev => ({ ...prev,\n      [name]: validateOnChange(name, value, prev[name])\n    }));\n  }\n\n  function handleDriverChange(driver) {\n    setForm(prev => ({ ...prev,\n      driver\n    }));\n  }\n\n  function handleTaskTypeChange(taskType) {\n    setForm(prev => ({ ...prev,\n      taskType\n    }));\n  }\n\n  const timeRatio = {\n    hour: 1,\n    day: 24,\n    week: 168,\n    year: 8736\n  };\n\n  const convertTime = function (time, from, to) {\n    return time * (timeRatio[from] / timeRatio[to]);\n  };\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver: driver.id,\n      location: {\n        start: startLocation,\n        end: endLocation\n      },\n      time: {\n        start: startTime,\n        end: endTime\n      }\n    };\n    addTask(task);\n  }\n\n  return {\n    form,\n    handleOnChange,\n    handleDriverChange,\n    handleTaskTypeChange\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/CalendarSidebar/CreateModal/useCreateModal.js"],"names":["useState","useCreateModal","initialState","addTask","form","setForm","validateOnChange","name","newValue","oldValue","handleOnChange","e","value","target","console","log","prev","handleDriverChange","driver","handleTaskTypeChange","taskType","timeRatio","hour","day","week","year","convertTime","time","from","to","handleAddTask","description","startLocation","endLocation","startDay","startHour","endDay","endHour","startTime","endTime","task","detail","type","id","location","start","end"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\n\nexport default function useCreateModal(initialState, addTask) {\n  const [form, setForm] = useState(initialState);\n\n  function validateOnChange(name, newValue, oldValue) {\n    switch (name) {\n      case \"startDay\":\n      case \"endDay\":\n        if (newValue >= 0 && newValue <= 364) {\n          return newValue;\n        }\n        return oldValue;\n      case \"startHour\":\n      case \"endHour\":\n        if (newValue >= 0 && newValue < 24) {\n          return newValue;\n        }\n        return oldValue;\n      default:\n        return newValue;\n    }\n  }\n  function handleOnChange(e) {\n    const { name, value } = e.target;\n    console.log(\"name\", name, \"value\", value);\n    setForm((prev) => ({\n      ...prev,\n      [name]: validateOnChange(name, value, prev[name]),\n    }));\n  }\n  function handleDriverChange(driver) {\n    setForm((prev) => ({ ...prev, driver }));\n  }\n  function handleTaskTypeChange(taskType) {\n    setForm((prev) => ({ ...prev, taskType }));\n  }\n\n  const timeRatio = {\n    hour: 1,\n    day: 24,\n    week: 168,\n    year: 8736,\n  };\n\n  const convertTime = function (time, from, to) {\n    return time * (timeRatio[from] / timeRatio[to]);\n  };\n\n  function handleAddTask() {\n    // need to transform data so form state because task state in useCalendar\n    const {\n      name,\n      description,\n      taskType,\n      driver,\n      startLocation,\n      endLocation,\n      startDay,\n      startHour,\n      endDay,\n      endHour,\n    } = form;\n    const startTime = convertTime(startDay, \"day\", \"hour\") + startHour;\n    const endTime = convertTime(endDay, \"day\", \"hour\") + endHour;\n    const task = {\n      name: name,\n      detail: description,\n      type: taskType.id,\n      driver: driver.id,\n      location: { start: startLocation, end: endLocation },\n      time: { start: startTime, end: endTime },\n    };\n    addTask(task);\n  }\n  return { form, handleOnChange, handleDriverChange, handleTaskTypeChange };\n}\n"]},"metadata":{},"sourceType":"module"}