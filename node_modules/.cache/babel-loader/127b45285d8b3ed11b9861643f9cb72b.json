{"ast":null,"code":"import { useState } from \"react\";\nexport default function useCalendar() {\n  /* Time 0 is set set arbitrarily to some point in the spacetime\n  Each increment of 1 represents the passing of one hour\n  Not sure if this is the best way to keep track of time\n  Can switch to momentJS in the future\n  */\n  const [time, setTime] = useState(0);\n  const [calendarTime, setCalendarTime] = useState(0);\n\n  const setCalendarView = function (week) {\n    setCalendarTime(convertTime(week, 'week', 'hour'));\n  }; // number of week into the year\n\n\n  const week = convertTime(time % timeRatio.year, 'hour', 'week');\n\n  const convertTime = function (time, from, to) {\n    const timeRatio = {\n      hour: 1,\n      day: 24,\n      week: 168,\n      year: 8736\n    };\n    return time * (timeRatio[from] / timeRatio[to]);\n  };\n\n  return {\n    setCalendarView,\n    week\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/useCalendar.js"],"names":["useState","useCalendar","time","setTime","calendarTime","setCalendarTime","setCalendarView","week","convertTime","timeRatio","year","from","to","hour","day"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,eAAe,SAASC,WAAT,GAAuB;AACpC;;;;;AAKA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACI,YAAD,EAAeC,eAAf,IAAkCL,QAAQ,CAAC,CAAD,CAAhD;;AAEA,QAAMM,eAAe,GAAG,UAAUC,IAAV,EAAgB;AACtCF,IAAAA,eAAe,CAACG,WAAW,CAACD,IAAD,EAAO,MAAP,EAAe,MAAf,CAAZ,CAAf;AACD,GAFD,CAToC,CAapC;;;AACA,QAAMA,IAAI,GAAGC,WAAW,CAACN,IAAI,GAAGO,SAAS,CAACC,IAAlB,EAAwB,MAAxB,EAAgC,MAAhC,CAAxB;;AAEA,QAAMF,WAAW,GAAG,UAAUN,IAAV,EAAgBS,IAAhB,EAAsBC,EAAtB,EAA0B;AAC5C,UAAMH,SAAS,GAAG;AAChBI,MAAAA,IAAI,EAAE,CADU;AAEhBC,MAAAA,GAAG,EAAE,EAFW;AAGhBP,MAAAA,IAAI,EAAE,GAHU;AAIhBG,MAAAA,IAAI,EAAE;AAJU,KAAlB;AAMA,WAAOR,IAAI,IAAIO,SAAS,CAACE,IAAD,CAAT,GAAkBF,SAAS,CAACG,EAAD,CAA/B,CAAX;AACD,GARD;;AAUA,SAAO;AACLN,IAAAA,eADK;AAELC,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useState } from \"react\";\n\nexport default function useCalendar() {\n  /* Time 0 is set set arbitrarily to some point in the spacetime\n  Each increment of 1 represents the passing of one hour\n  Not sure if this is the best way to keep track of time\n  Can switch to momentJS in the future\n  */\n  const [time, setTime] = useState(0);\n  const [calendarTime, setCalendarTime] = useState(0);\n\n  const setCalendarView = function (week) {\n    setCalendarTime(convertTime(week, 'week', 'hour')) \n  }\n\n  // number of week into the year\n  const week = convertTime(time % timeRatio.year, 'hour', 'week')\n\n  const convertTime = function (time, from, to) {\n    const timeRatio = {\n      hour: 1,\n      day: 24,\n      week: 168,\n      year: 8736\n    };\n    return time * (timeRatio[from] / timeRatio[to]);\n  };\n\n  return {\n    setCalendarView,\n    week,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}