{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/momo/portfolio/roseRocket/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/home/momo/portfolio/roseRocket/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/home/momo/portfolio/roseRocket/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";export default function useGenerateCsf(yearlyTasks,driversList){var _useState=useState({id:2,name:\"2 days\"}),_useState2=_slicedToArray(_useState,2),csvInterval=_useState2[0],setCsvInterval=_useState2[1];var _useState3=useState(driversList[0]),_useState4=_slicedToArray(_useState3,2),driverSelected=_useState4[0],setDriverSelected=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),data=_useState6[0],setData=_useState6[1];var possibleInterval=[{id:2,name:\"2 days\"},{id:4,name:\"4 days\"},{id:7,name:\"7 days\"},{id:14,name:\"14 days\"},{id:28,name:\"28 days\"}];var headers=[{label:\"Time Frame\",key:\"timeFrame\"},{label:\"Pickup\",key:\"pickup\"},{label:\"Drop-off\",key:\"dropoff\"},{label:\"Other\",key:\"other\"}];function summarizeDriverActivities(){var intervalDuration=csvInterval.id;// find all task of the driver selected\n// convert map to array first\nvar driverTasks=Array.from(yearlyTasks.values()).filter(function(task){return task.driver.id===driverSelected.id;});// generate the accumulator object used to tally tasks\nvar initialAccumulator={};for(var i=0;i<364;i++){// if beginning of interval\nif(i%intervalDuration===0){initialAccumulator[i]={pickup:0,dropoff:0,other:0};}}function sumEachInterval(initialAccumulator,tasks){var taskTally=tasks.reduce(function(accumulator,task){var taskDay=Math.floor(task.time.start/24);/* ex: for day 5 at 2 day interval, the interval \n        which it belongs to is 4 - 5. so taskInterval = 4*/var taskInterval=taskDay-taskDay%intervalDuration;var newAccumulator=_objectSpread({},accumulator);// increment the appropriate task type\nnewAccumulator[taskInterval][task.type]+=1;return newAccumulator;},initialAccumulator);return Object.entries(taskTally);}// transform data to shape accepted by react-csv\nfunction transformToCsvShape(data){var output=[];var _iterator=_createForOfIteratorHelper(data),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),intervalStartDay=_step$value[0],tally=_step$value[1];output.push(_objectSpread({timeFrame:\"Day \".concat(intervalStartDay,\" - Day \").concat(parseInt(intervalStartDay)+intervalDuration)},tally));}}catch(err){_iterator.e(err);}finally{_iterator.f();}return output;}return transformToCsvShape(sumEachInterval(initialAccumulator,driverTasks));}function handleDownload(){setData(summarizeDriverActivities());}var filename=\"\".concat(driverSelected.id,\"-\").concat(driverSelected.name,\"-\").concat(csvInterval.id,\"-days-interval-summary\");return{csvInterval:csvInterval,setCsvInterval:setCsvInterval,possibleInterval:possibleInterval,driverSelected:driverSelected,setDriverSelected:setDriverSelected,handleDownload:handleDownload,data:data,headers:headers,filename:filename};}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/CalendarSidebar/GenerateCsv/useGenerateCsv.js"],"names":["useState","useGenerateCsf","yearlyTasks","driversList","id","name","csvInterval","setCsvInterval","driverSelected","setDriverSelected","data","setData","possibleInterval","headers","label","key","summarizeDriverActivities","intervalDuration","driverTasks","Array","from","values","filter","task","driver","initialAccumulator","i","pickup","dropoff","other","sumEachInterval","tasks","taskTally","reduce","accumulator","taskDay","Math","floor","time","start","taskInterval","newAccumulator","type","Object","entries","transformToCsvShape","output","intervalStartDay","tally","push","timeFrame","parseInt","handleDownload","filename"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nexport default function useGenerateCsf(yearlyTasks, driversList) {\n  const [csvInterval, setCsvInterval] = useState({ id: 2, name: \"2 days\" });\n  const [driverSelected, setDriverSelected] = useState(driversList[0]);\n  const [data, setData] = useState([]);\n\n  const possibleInterval = [\n    { id: 2, name: \"2 days\" },\n    { id: 4, name: \"4 days\" },\n    { id: 7, name: \"7 days\" },\n    { id: 14, name: \"14 days\" },\n    { id: 28, name: \"28 days\" },\n  ];\n  const headers = [\n    { label: \"Time Frame\", key: \"timeFrame\" },\n    { label: \"Pickup\", key: \"pickup\" },\n    { label: \"Drop-off\", key: \"dropoff\" },\n    { label: \"Other\", key: \"other\" },\n  ];\n  function summarizeDriverActivities() {\n    const intervalDuration = csvInterval.id;\n    // find all task of the driver selected\n    // convert map to array first\n    const driverTasks = Array.from(yearlyTasks.values()).filter(\n      (task) => task.driver.id === driverSelected.id\n    );\n    // generate the accumulator object used to tally tasks\n    let initialAccumulator = {};\n    for (let i = 0; i < 364; i++) {\n      // if beginning of interval\n      if (i % intervalDuration === 0) {\n        initialAccumulator[i] = { pickup: 0, dropoff: 0, other: 0 };\n      }\n    }\n\n    function sumEachInterval(initialAccumulator, tasks) {\n      const taskTally = tasks.reduce((accumulator, task) => {\n        const taskDay = Math.floor(task.time.start / 24);\n        /* ex: for day 5 at 2 day interval, the interval \n        which it belongs to is 4 - 5. so taskInterval = 4*/\n        const taskInterval = taskDay - (taskDay % intervalDuration);\n        const newAccumulator = { ...accumulator };\n        // increment the appropriate task type\n        newAccumulator[taskInterval][task.type] += 1;\n        return newAccumulator;\n      }, initialAccumulator);\n      return Object.entries(taskTally);\n    }\n    // transform data to shape accepted by react-csv\n    function transformToCsvShape(data) {\n      const output = [];\n      for (const [intervalStartDay, tally] of data) {\n        output.push({\n          timeFrame: `Day ${intervalStartDay} - Day ${\n            parseInt(intervalStartDay) + intervalDuration\n          }`,\n          ...tally,\n        });\n      }\n      return output;\n    }\n    return transformToCsvShape(\n      sumEachInterval(initialAccumulator, driverTasks)\n    );\n  }\n\n  function handleDownload() {\n    setData(summarizeDriverActivities());\n  }\n  const filename = `${driverSelected.id}-${driverSelected.name}-${csvInterval.id}-days-interval-summary`;\n\n  return {\n    csvInterval,\n    setCsvInterval,\n    possibleInterval,\n    driverSelected,\n    setDriverSelected,\n    handleDownload,\n    data,\n    headers,\n    filename,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}