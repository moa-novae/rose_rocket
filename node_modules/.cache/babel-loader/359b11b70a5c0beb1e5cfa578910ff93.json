{"ast":null,"code":"import _slicedToArray from\"/home/momo/portfolio/roseRocket/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import Modal from\"../../../../Modal/Modal\";import CreateModal from\"../../../CalendarSidebar/CreateModal/CreateModal\";import{FontAwesomeIcon}from\"@fortawesome/react-fontawesome\";import{faMapMarkerAlt,faClock,faTruckMoving,faEdit,faTrashAlt}from\"@fortawesome/free-solid-svg-icons\";import{convertTime}from\"../../../../../utils/convertTime\";import\"./taskModal.scss\";export default function TaskModal(_ref){var taskInfo=_ref.taskInfo,showModal=_ref.showModal,setShowModal=_ref.setShowModal,driversList=_ref.driversList,addTask=_ref.addTask,deleteTask=_ref.deleteTask,addAndDeleteTask=_ref.addAndDeleteTask;// transform time into human readable day and hour\nvar day=taskInfo.time.start%(24*7);var week=Math.floor(convertTime(taskInfo.time.start,\"hour\",\"week\"));var startHour=taskInfo.time.start%24;var endHour=taskInfo.time.end%24;// massage taskInfo prop into the correct form state shape and pass as initial state\nvar initialState={id:taskInfo.id,name:taskInfo.name,taskType:{id:taskInfo.type},driver:{id:taskInfo.driver.id},startDay:Math.floor(convertTime(taskInfo.time.start,\"hour\",\"day\")),startHour:taskInfo.time.start%24,endHour:taskInfo.time.end%24,startLocation:taskInfo.location.start,endLocation:taskInfo.location.finish,description:taskInfo.description};var _useState=useState(\"view\"),_useState2=_slicedToArray(_useState,2),mode=_useState2[0],setMode=_useState2[1];return/*#__PURE__*/React.createElement(React.Fragment,null,mode===\"view\"&&/*#__PURE__*/React.createElement(Modal,{showModal:showModal,setShowModal:setShowModal,handleOnClose:function handleOnClose(){return setMode(\"view\");}},/*#__PURE__*/React.createElement(\"div\",{className:\"task-wrapper\"},/*#__PURE__*/React.createElement(\"div\",{className:\"action-wrapper\"},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faEdit,onClick:function onClick(){setMode(\"edit\");}}),/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faTrashAlt,onClick:function onClick(){return deleteTask(taskInfo.id);}})),/*#__PURE__*/React.createElement(\"div\",{className:\"task-name\"},taskInfo.name),/*#__PURE__*/React.createElement(\"div\",{className:\"task-line no-icon\"},/*#__PURE__*/React.createElement(\"div\",null,taskInfo.type)),/*#__PURE__*/React.createElement(\"div\",{className:\"task-line\"},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faTruckMoving}),/*#__PURE__*/React.createElement(\"div\",null,taskInfo.driver.name)),/*#__PURE__*/React.createElement(\"div\",{className:\"task-line\"},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faClock}),/*#__PURE__*/React.createElement(\"div\",null,\"From week \".concat(week,\" day \").concat(day,\" hour \").concat(startHour,\" to \").concat(endHour))),/*#__PURE__*/React.createElement(\"div\",{className:\"task-line\"},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faMapMarkerAlt}),/*#__PURE__*/React.createElement(\"div\",null,\"From \".concat(taskInfo.location.start,\" to \").concat(taskInfo.location.finish))),/*#__PURE__*/React.createElement(\"div\",{className:\"task-line no-icon\"},/*#__PURE__*/React.createElement(\"div\",null,taskInfo.description)))),mode===\"edit\"&&/*#__PURE__*/React.createElement(CreateModal,{initialState:initialState,showModal:showModal,setShowModal:setShowModal,addTask:addTask,deleteTask:deleteTask,addAndDeleteTask:addAndDeleteTask,driversList:driversList,handleOnClose:function handleOnClose(){return setMode(\"view\");}}));}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/DayColumn/Task/TaskModal/TaskModal.js"],"names":["React","useState","Modal","CreateModal","FontAwesomeIcon","faMapMarkerAlt","faClock","faTruckMoving","faEdit","faTrashAlt","convertTime","TaskModal","taskInfo","showModal","setShowModal","driversList","addTask","deleteTask","addAndDeleteTask","day","time","start","week","Math","floor","startHour","endHour","end","initialState","id","name","taskType","type","driver","startDay","startLocation","location","endLocation","finish","description","mode","setMode"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Modal from \"../../../../Modal/Modal\";\nimport CreateModal from \"../../../CalendarSidebar/CreateModal/CreateModal\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faMapMarkerAlt,\n  faClock,\n  faTruckMoving,\n  faEdit,\n  faTrashAlt,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { convertTime } from \"../../../../../utils/convertTime\";\nimport \"./taskModal.scss\";\nexport default function TaskModal({\n  taskInfo,\n  showModal,\n  setShowModal,\n  driversList,\n  addTask,\n  deleteTask,\n  addAndDeleteTask,\n}) {\n  // transform time into human readable day and hour\n  const day = taskInfo.time.start % (24 * 7);\n  const week = Math.floor(convertTime(taskInfo.time.start, \"hour\", \"week\"));\n  const startHour = taskInfo.time.start % 24;\n  const endHour = taskInfo.time.end % 24;\n  // massage taskInfo prop into the correct form state shape and pass as initial state\n  const initialState = {\n    id: taskInfo.id,\n    name: taskInfo.name,\n    taskType: { id: taskInfo.type },\n    driver: { id: taskInfo.driver.id },\n    startDay: Math.floor(convertTime(taskInfo.time.start, \"hour\", \"day\")),\n    startHour: taskInfo.time.start % 24,\n    endHour: taskInfo.time.end % 24,\n    startLocation: taskInfo.location.start,\n    endLocation: taskInfo.location.finish,\n    description: taskInfo.description,\n  };\n  const [mode, setMode] = useState(\"view\");\n  return (\n    <>\n      {mode === \"view\" && (\n        <Modal\n          showModal={showModal}\n          setShowModal={setShowModal}\n          handleOnClose={() => setMode(\"view\")}\n        >\n          <div className=\"task-wrapper\">\n            <div className=\"action-wrapper\">\n              <FontAwesomeIcon\n                icon={faEdit}\n                onClick={() => {\n                  setMode(\"edit\");\n                }}\n              />\n              <FontAwesomeIcon\n                icon={faTrashAlt}\n                onClick={() => deleteTask(taskInfo.id)}\n              />\n            </div>\n            <div className=\"task-name\">{taskInfo.name}</div>\n            <div className=\"task-line no-icon\">\n              <div>{taskInfo.type}</div>\n            </div>\n            <div className=\"task-line\">\n              <FontAwesomeIcon icon={faTruckMoving} />\n\n              <div>{taskInfo.driver.name}</div>\n            </div>\n\n            <div className=\"task-line\">\n              <FontAwesomeIcon icon={faClock} />\n\n              <div>\n                {`From week ${week} day ${day} hour ${startHour} to ${endHour}`}\n              </div>\n            </div>\n\n            <div className=\"task-line\">\n              <FontAwesomeIcon icon={faMapMarkerAlt} />\n\n              <div>\n                {`From ${taskInfo.location.start} to ${taskInfo.location.finish}`}\n              </div>\n            </div>\n            <div className=\"task-line no-icon\">\n              <div>{taskInfo.description}</div>\n            </div>\n          </div>\n        </Modal>\n      )}\n      {mode === \"edit\" && (\n        <CreateModal\n          initialState={initialState}\n          showModal={showModal}\n          setShowModal={setShowModal}\n          addTask={addTask}\n          deleteTask={deleteTask}\n          addAndDeleteTask={addAndDeleteTask}\n          driversList={driversList}\n          handleOnClose={() => setMode(\"view\")}\n        />\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}