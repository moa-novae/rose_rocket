{"ast":null,"code":"import { useState } from \"react\";\nexport default function useGenerateCsf(yearlyTasks, driversList) {\n  const [csvInterval, setCsvInterval] = useState({\n    id: 2,\n    name: \"2 days\"\n  });\n  const [driverSelected, setDriverSelected] = useState(driversList[0]);\n  const possibleInterval = [{\n    id: 2,\n    name: \"2 days\"\n  }, {\n    id: 4,\n    name: \"4 days\"\n  }, {\n    id: 7,\n    name: \"7 days\"\n  }, {\n    id: 14,\n    name: \"14 days\"\n  }, {\n    id: 28,\n    name: \"28 days\"\n  }];\n\n  function summarizeDriverActivities() {\n    const intervalDuration = csvInterval.id; // find all task of the driver selected\n    // convert map to array first\n\n    const driverTasks = Array.from(yearlyTasks.values()).filter(task => task.driver.id == driverSelected.id); // generate the accumulator object used to tally tasks\n\n    let initialAccumulator = {};\n\n    for (let i = 0; i < 364; i++) {\n      // if beginning of interval\n      if (!i % intervalDuration) {\n        initialAccumulator[i] = {\n          pickup: 0,\n          dropoff: 0,\n          other: 0\n        };\n      }\n    }\n\n    function sumEachInterval(initialAccumulator, tasks) {\n      return tasks.reduce((accumulator, task) => {\n        const taskDay = Math.floor(task.time.start % 24);\n        /* ex: for day 5 at 2 day interval, the interval \n        which it belongs to is 4 - 5. so taskInterval = 4*/\n\n        const taskInterval = taskDay - taskDay % intervalDuration;\n        const newAccumulator = { ...accumulator\n        };\n        newAccumulator[taskInterval][task.type] += 1;\n        return newAccumulator;\n      }, initialAccumulator);\n    }\n\n    function transformToCsvShape(data) {\n      const output = [];\n\n      for (const [intervalStartDay, tally] of data) {\n        output.push({\n          timeFrame: `Day ${intervalStartDay} - Day ${intervalStartDay + intervalDuration}`,\n          ...tally\n        });\n      }\n\n      return output;\n    }\n\n    const data = transformToCsvShape(sumEachInterval(initialAccumulator, driverTasks));\n    const headers = [{\n      label: \"Time Frame\",\n      key: \"timeFrame\"\n    }, {\n      label: \"Pickup\",\n      key: \"pickup\"\n    }, {\n      label: \"Drop-off\",\n      key: \"dropoff\"\n    }, {\n      label: \"Other\",\n      key: \"other\"\n    }];\n    return {\n      data,\n      headers\n    };\n  }\n\n  return {\n    csvInterval,\n    setCsvInterval,\n    possibleInterval,\n    driverSelected,\n    setDriverSelected,\n    summarizeDriverActivities\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/CalendarSidebar/GenerateCsv/useGenerateCsv.js"],"names":["useState","useGenerateCsf","yearlyTasks","driversList","csvInterval","setCsvInterval","id","name","driverSelected","setDriverSelected","possibleInterval","summarizeDriverActivities","intervalDuration","driverTasks","Array","from","values","filter","task","driver","initialAccumulator","i","pickup","dropoff","other","sumEachInterval","tasks","reduce","accumulator","taskDay","Math","floor","time","start","taskInterval","newAccumulator","type","transformToCsvShape","data","output","intervalStartDay","tally","push","timeFrame","headers","label","key"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nexport default function useGenerateCsf(yearlyTasks, driversList) {\n  const [csvInterval, setCsvInterval] = useState({ id: 2, name: \"2 days\" });\n  const [driverSelected, setDriverSelected] = useState(driversList[0]);\n  const possibleInterval = [\n    { id: 2, name: \"2 days\" },\n    { id: 4, name: \"4 days\" },\n    { id: 7, name: \"7 days\" },\n    { id: 14, name: \"14 days\" },\n    { id: 28, name: \"28 days\" },\n  ];\n  function summarizeDriverActivities() {\n    const intervalDuration = csvInterval.id;\n    // find all task of the driver selected\n    // convert map to array first\n    const driverTasks = Array.from(yearlyTasks.values()).filter(\n      (task) => task.driver.id == driverSelected.id\n    );\n    // generate the accumulator object used to tally tasks\n    let initialAccumulator = {};\n    for (let i = 0; i < 364; i++) {\n      // if beginning of interval\n      if (!i % intervalDuration) {\n        initialAccumulator[i] = { pickup: 0, dropoff: 0, other: 0 };\n      }\n    }\n\n    function sumEachInterval(initialAccumulator, tasks) {\n      return tasks.reduce((accumulator, task) => {\n        const taskDay = Math.floor(task.time.start % 24);\n        /* ex: for day 5 at 2 day interval, the interval \n        which it belongs to is 4 - 5. so taskInterval = 4*/\n        const taskInterval = taskDay - (taskDay % intervalDuration);\n        const newAccumulator = { ...accumulator };\n        newAccumulator[taskInterval][task.type] += 1;\n        return newAccumulator;\n      }, initialAccumulator);\n    }\n    function transformToCsvShape(data) {\n      const output = [];\n      for (const [intervalStartDay, tally] of data) {\n        output.push({\n          timeFrame: `Day ${intervalStartDay} - Day ${\n            intervalStartDay + intervalDuration\n          }`,\n          ...tally,\n        });\n      }\n      return output;\n    }\n    const data = transformToCsvShape(\n      sumEachInterval(initialAccumulator, driverTasks)\n    );\n\n    const headers = [\n      { label: \"Time Frame\", key: \"timeFrame\" },\n      { label: \"Pickup\", key: \"pickup\" },\n      { label: \"Drop-off\", key: \"dropoff\" },\n      { label: \"Other\", key: \"other\" },\n    ];\n    return { data, headers };\n  }\n  return {\n    csvInterval,\n    setCsvInterval,\n    possibleInterval,\n    driverSelected,\n    setDriverSelected,\n    summarizeDriverActivities,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}