{"ast":null,"code":"import { useState } from \"react\";\n/*\n  I couldn't find a good library that implements time on \n  a 24 h / 7 day / 52 week discrete timescale. Popular libraries \n  like MomentJS are implemented in real world timescales. \n  For simplicity sake, I ended up just writing the way the \n  time works myself.\n */\n\nexport default function useCalendar() {\n  /* Time 0 is set set arbitrarily to some point in the spacetime\n  Each increment of 1 represents the passing of one hour\n  Not sure if this is the best way to keep track of time\n  Can switch to momentJS in the future\n  No use for time state right now since not using real world time\n  */\n  // const [time, setTime] = useState(0);\n  const [calendarTime, setCalendarTime] = useState(0);\n  const timeRatio = {\n    hour: 1,\n    day: 24,\n    week: 168,\n    year: 8736\n  };\n\n  const convertTime = function (time, from, to) {\n    return time * (timeRatio[from] / timeRatio[to]);\n  }; // number of week into the year\n\n\n  const week = convertTime(calendarTime % timeRatio.year, \"hour\", \"week\");\n\n  const changeWeekBy = n => {\n    setCalendarTime(prev => {\n      const newWeek = prev + n * timeRatio.week; // Don't allow negative weeks\n\n      return newWeek >= 0 ? newWeek : prev;\n    });\n  };\n\n  const findDayAndHourFromTime = function (time) {\n    const day = (time % timeRatio.week / timeRatio.day).floor();\n    const hour = time % timeRatio.day;\n    return {\n      day,\n      hour\n    };\n  };\n\n  let weeklyTasks = [];\n\n  if (week === 0) {\n    //api response placeholder\n    weeklyTasks = [{\n      name: \"task1\",\n      detail: \"very cool\",\n      time: 100\n    }]; //transform data to indicate day and time\n\n    weeklyTasks.map(task => ({ ...task,\n      time: findDayAndHourFromTime(task.time)\n    }));\n  }\n\n  if (week === 1) {\n    weeklyTasks = [{\n      name: \"task2\",\n      detail: \"super cool\",\n      time: 200\n    }];\n    weeklyTasks.map(task => ({ ...task,\n      time: findDayAndHourFromTime(task.time)\n    }));\n  }\n\n  return {\n    changeWeekBy,\n    week,\n    weeklyTasks\n  };\n}","map":{"version":3,"sources":["/home/momo/portfolio/roseRocket/client/src/components/Calendar/useCalendar.js"],"names":["useState","useCalendar","calendarTime","setCalendarTime","timeRatio","hour","day","week","year","convertTime","time","from","to","changeWeekBy","n","prev","newWeek","findDayAndHourFromTime","floor","weeklyTasks","name","detail","map","task"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA;;;;;;;;AAOA,eAAe,SAASC,WAAT,GAAuB;AACpC;;;;;;AAMA;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,CAAD,CAAhD;AAEA,QAAMI,SAAS,GAAG;AAChBC,IAAAA,IAAI,EAAE,CADU;AAEhBC,IAAAA,GAAG,EAAE,EAFW;AAGhBC,IAAAA,IAAI,EAAE,GAHU;AAIhBC,IAAAA,IAAI,EAAE;AAJU,GAAlB;;AAOA,QAAMC,WAAW,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,EAAtB,EAA0B;AAC5C,WAAOF,IAAI,IAAIN,SAAS,CAACO,IAAD,CAAT,GAAkBP,SAAS,CAACQ,EAAD,CAA/B,CAAX;AACD,GAFD,CAjBoC,CAoBpC;;;AACA,QAAML,IAAI,GAAGE,WAAW,CAACP,YAAY,GAAGE,SAAS,CAACI,IAA1B,EAAgC,MAAhC,EAAwC,MAAxC,CAAxB;;AACA,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC1BX,IAAAA,eAAe,CAAEY,IAAD,IAAU;AACxB,YAAMC,OAAO,GAAGD,IAAI,GAAGD,CAAC,GAAGV,SAAS,CAACG,IAArC,CADwB,CAExB;;AACA,aAAOS,OAAO,IAAI,CAAX,GAAeA,OAAf,GAAyBD,IAAhC;AACD,KAJc,CAAf;AAKD,GAND;;AAQA,QAAME,sBAAsB,GAAG,UAAUP,IAAV,EAAgB;AAC7C,UAAMJ,GAAG,GAAG,CAAEI,IAAI,GAAGN,SAAS,CAACG,IAAlB,GAA0BH,SAAS,CAACE,GAArC,EAA0CY,KAA1C,EAAZ;AACA,UAAMb,IAAI,GAAGK,IAAI,GAAGN,SAAS,CAACE,GAA9B;AACA,WAAO;AAAEA,MAAAA,GAAF;AAAOD,MAAAA;AAAP,KAAP;AACD,GAJD;;AAKA,MAAIc,WAAW,GAAG,EAAlB;;AACA,MAAIZ,IAAI,KAAK,CAAb,EAAgB;AACd;AACAY,IAAAA,WAAW,GAAG,CAAC;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAE,WAAzB;AAAsCX,MAAAA,IAAI,EAAE;AAA5C,KAAD,CAAd,CAFc,CAGd;;AACAS,IAAAA,WAAW,CAACG,GAAZ,CAAiBC,IAAD,KAAW,EACzB,GAAGA,IADsB;AAEzBb,MAAAA,IAAI,EAAEO,sBAAsB,CAACM,IAAI,CAACb,IAAN;AAFH,KAAX,CAAhB;AAID;;AACD,MAAIH,IAAI,KAAK,CAAb,EAAgB;AACdY,IAAAA,WAAW,GAAG,CAAC;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,MAAM,EAAE,YAAzB;AAAuCX,MAAAA,IAAI,EAAE;AAA7C,KAAD,CAAd;AACAS,IAAAA,WAAW,CAACG,GAAZ,CAAiBC,IAAD,KAAW,EACzB,GAAGA,IADsB;AAEzBb,MAAAA,IAAI,EAAEO,sBAAsB,CAACM,IAAI,CAACb,IAAN;AAFH,KAAX,CAAhB;AAID;;AACD,SAAO;AACLG,IAAAA,YADK;AAELN,IAAAA,IAFK;AAGLY,IAAAA;AAHK,GAAP;AAKD","sourcesContent":["import { useState } from \"react\";\n\n/*\n  I couldn't find a good library that implements time on \n  a 24 h / 7 day / 52 week discrete timescale. Popular libraries \n  like MomentJS are implemented in real world timescales. \n  For simplicity sake, I ended up just writing the way the \n  time works myself.\n */\nexport default function useCalendar() {\n  /* Time 0 is set set arbitrarily to some point in the spacetime\n  Each increment of 1 represents the passing of one hour\n  Not sure if this is the best way to keep track of time\n  Can switch to momentJS in the future\n  No use for time state right now since not using real world time\n  */\n  // const [time, setTime] = useState(0);\n  const [calendarTime, setCalendarTime] = useState(0);\n\n  const timeRatio = {\n    hour: 1,\n    day: 24,\n    week: 168,\n    year: 8736,\n  };\n\n  const convertTime = function (time, from, to) {\n    return time * (timeRatio[from] / timeRatio[to]);\n  };\n  // number of week into the year\n  const week = convertTime(calendarTime % timeRatio.year, \"hour\", \"week\");\n  const changeWeekBy = (n) => {\n    setCalendarTime((prev) => {\n      const newWeek = prev + n * timeRatio.week;\n      // Don't allow negative weeks\n      return newWeek >= 0 ? newWeek : prev;\n    });\n  };\n\n  const findDayAndHourFromTime = function (time) {\n    const day = ((time % timeRatio.week) / timeRatio.day).floor();\n    const hour = time % timeRatio.day;\n    return { day, hour };\n  };\n  let weeklyTasks = [];\n  if (week === 0) {\n    //api response placeholder\n    weeklyTasks = [{ name: \"task1\", detail: \"very cool\", time: 100 }];\n    //transform data to indicate day and time\n    weeklyTasks.map((task) => ({\n      ...task,\n      time: findDayAndHourFromTime(task.time),\n    }));\n  }\n  if (week === 1) {\n    weeklyTasks = [{ name: \"task2\", detail: \"super cool\", time: 200 }];\n    weeklyTasks.map((task) => ({\n      ...task,\n      time: findDayAndHourFromTime(task.time),\n    }));\n  }\n  return {\n    changeWeekBy,\n    week,\n    weeklyTasks,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}